
module RegAdder(x,y){
   pipeline_register r;
#
   a = x + y;

   a -> r;

   r -> out;
}

module DelayImprove(x,y){
   xmem mem1;
   RegAdder a1;
   RegAdder a2;
   RegAdder a3;
#
   mem1[0]  -> a1:0;
   x[0]     -> a1:1;

   mem1[1]  -> a2:0;
   a1       -> a2:1;

   y        -> a3:0;
   a2       -> a3:1;

   a3       -> out; 
}

module TestDelayImprove(y){
   DelayImprove p1;
   DelayImprove p2;
#
   y[0] -> p1;
   p1   -> p2;
}

module ShaSingleState(in){
   xreg reg;
#
   a = reg + in;
   a -> reg;
   reg -> out;
}

module AddCarry(x,y,z,w){
   RegAdder a1;
   RegAdder a2;
   RegAdder a3;
#
   x -> a1:0;
   y -> a1:1;

   z[1] -> a2:0;
   a1   -> a2:1;

   w[2] -> a3:0;
   a2   -> a3:1;

   a3 -> out;
}

module t1(x,y,z,w){
   AddCarry a1;
#
   x -> a1:0;
   y -> a1:1;
   z -> a1:2;
   w -> a1:3;

   a1 -> out;
}

module sigma(x){
   xconst const1;
   xconst const2;
   xconst const3;
#
   a1 = x >>> const1;
   a2 = x >>> const2;
   a3 = x >> const3;

   b1 = a1 ^ a2;

   c1 = b1 ^ a3;

   c1 -> out;
}

module Adder(x,y){
#
   a = x + y;

   a -> out;
}

module TestSpec(){
   xreg r1;
   xreg r2;
   xreg r3;
   Adder adder;
#
   r1 -> adder:0;
   r2 -> adder:1;

   adder:0 -> r3;
}

module Sigma(x){
   xconst const1;
   xconst const2;
   xconst const3;
#
   a1 = x >>> const1;
   a2 = x >>> const2;
   a3 = x >>> const3;

   b1 = a1 ^ a2;

   c1 = b1 ^ a3;

   c1 -> out;
}

module CH (x,y,z){
#
   a1 = x & y;
   a2 = ~x & z;

   b1 = a1 ^ a2;

   b1 -> out;
}

module Maj (x,y,z){
#
   a1 = x & y;
   a2 = x & z;
   a3 = y & z;

   b1 = a1 ^ a2;

   c1 = b1 ^ a3;

   c1 -> out;
}

module M_Stage(w0,w14,w9,w1){
   sigma sigma0(7,18,3);
   sigma sigma1(17,19,10);
   pipeline_register r;
#
   w14 -> sigma1;
   w1 -> sigma0;

   a1 = sigma1 + w9;
   a2 = sigma0 + w0;

   b = a1 + a2;

   b -> r;

   r -> out;
}

module Input_M(w){
   M_Stage m0;
   M_Stage m1;
   M_Stage m2;
   M_Stage m3;
   M_Stage m4;
   M_Stage m5;
   M_Stage m6;
   M_Stage m7;
   M_Stage m8;
   M_Stage m9;
   M_Stage ma;
   M_Stage mb;
   M_Stage mc;
   M_Stage md;
   M_Stage me;
   M_Stage mf;
#
   w[0] -> m0:0;
   w[14] -> m0:1;
   w[9] -> m0:2;
   w[1] -> m0:3;

   w[1] -> m1:0;
   w[15] -> m1:1;
   w[10] -> m1:2;
   w[2] -> m1:3;
   
   w[2] -> m2:0;
   m0 -> m2:1;
   w[11] -> m2:2;
   w[3] -> m2:3;
   
   w[3] -> m3:0;
   m1 -> m3:1;
   w[12] -> m3:2;
   w[4] -> m3:3;
   
   w[4] -> m4:0;
   m2 -> m4:1;
   w[13] -> m4:2;
   w[5] -> m4:3;
   
   w[5] -> m5:0;
   m3 -> m5:1;
   w[14] -> m5:2;
   w[6] -> m5:3;
   
   w[6] -> m6:0;
   m4 -> m6:1;
   w[15] -> m6:2;
   w[7] -> m6:3;
   
   w[7] -> m7:0;
   m5 -> m7:1;
   m0 -> m7:2;
   w[8] -> m7:3;
   
   w[8] -> m8:0;
   m6 -> m8:1;
   m1 -> m8:2;
   w[9] -> m8:3;
   
   w[9] -> m9:0;
   m7 -> m9:1;
   m2 -> m9:2;
   w[10] -> m9:3;
   
   w[10] -> ma:0;
   m8 -> ma:1;
   m3 -> ma:2;
   w[11] -> ma:3;
   
   w[11] -> mb:0;
   m9 -> mb:1;
   m4 -> mb:2;
   w[12] -> mb:3;
   
   w[12] -> mc:0;
   ma -> mc:1;
   m5 -> mc:2;
   w[13] -> mc:3;
   
   w[13] -> md:0;
   mb -> md:1;
   m6 -> md:2;
   w[14] -> md:3;
   
   w[14] -> me:0;
   mc -> me:1;
   m7 -> me:2;
   w[15] -> me:3;
   
   w[15] -> mf:0;
   md -> mf:1;
   m8 -> mf:2;
   m0 -> mf:3;

   m0 -> out:0;
   m1 -> out:1;
   m2 -> out:2;
   m3 -> out:3;
   m4 -> out:4;
   m5 -> out:5;
   m6 -> out:6;
   m7 -> out:7;
   m8 -> out:8;
   m9 -> out:9;
   ma -> out:10;
   mb -> out:11;
   mc -> out:12;
   md -> out:13;
   me -> out:14;
   mf -> out:15;
}

module M(w0,w1,w2,w3,w4,w5,w6,w7,w8,w9,w10,w11,w12,w13,w14,w15){
   M_Stage m0;
   M_Stage m1;
   M_Stage m2;
   M_Stage m3;
   M_Stage m4;
   M_Stage m5;
   M_Stage m6;
   M_Stage m7;
   M_Stage m8;
   M_Stage m9;
   M_Stage ma;
   M_Stage mb;
   M_Stage mc;
   M_Stage md;
   M_Stage me;
   M_Stage mf;
#
   w0 -> m0:0;
   w14 -> m0:1;
   w9 -> m0:2;
   w1 -> m0:3;

   w1 -> m1:0;
   w15 -> m1:1;
   w10 -> m1:2;
   w2 -> m1:3;
   
   w2 -> m2:0;
   m0 -> m2:1;
   w11 -> m2:2;
   w3 -> m2:3;
   
   w3 -> m3:0;
   m1 -> m3:1;
   w12 -> m3:2;
   w4 -> m3:3;
   
   w4 -> m4:0;
   m2 -> m4:1;
   w13 -> m4:2;
   w5 -> m4:3;
   
   w5 -> m5:0;
   m3 -> m5:1;
   w14 -> m5:2;
   w6 -> m5:3;
   
   w6 -> m6:0;
   m4 -> m6:1;
   w15 -> m6:2;
   w7 -> m6:3;
   
   w7 -> m7:0;
   m5 -> m7:1;
   m0 -> m7:2;
   w8 -> m7:3;
   
   w8 -> m8:0;
   m6 -> m8:1;
   m1 -> m8:2;
   w9 -> m8:3;
   
   w9 -> m9:0;
   m7 -> m9:1;
   m2 -> m9:2;
   w10 -> m9:3;
   
   w10 -> ma:0;
   m8 -> ma:1;
   m3 -> ma:2;
   w11 -> ma:3;
   
   w11 -> mb:0;
   m9 -> mb:1;
   m4 -> mb:2;
   w12 -> mb:3;
   
   w12 -> mc:0;
   ma -> mc:1;
   m5 -> mc:2;
   w13 -> mc:3;
   
   w13 -> md:0;
   mb -> md:1;
   m6 -> md:2;
   w14 -> md:3;
   
   w14 -> me:0;
   mc -> me:1;
   m7 -> me:2;
   w15 -> me:3;
   
   w15 -> mf:0;
   md -> mf:1;
   m8 -> mf:2;
   m0 -> mf:3;

   m0 -> out:0;
   m1 -> out:1;
   m2 -> out:2;
   m3 -> out:3;
   m4 -> out:4;
   m5 -> out:5;
   m6 -> out:6;
   m7 -> out:7;
   m8 -> out:8;
   m9 -> out:9;
   ma -> out:10;
   mb -> out:11;
   mc -> out:12;
   md -> out:13;
   me -> out:14;
   mf -> out:15;
}

module T1(e,f,g,h,k,w){
   CH ch;
   Sigma s(6,11,25);
#   
   e -> s;

   e -> ch:0;
   f -> ch:1;
   g -> ch:2;

   a1 = h + s:0;
   a2 = ch + k;
   a3 = a1 + a2;
   
   b1 = a3 + w;

   b1 -> out;
}

module T2(a,b,c){
   Sigma s(2,13,22);
   Maj m;
#
   a -> s;

   a -> m:0;
   b -> m:1;
   c -> m:2;

   d = s + m;

   d -> out; 
}

module F_Stage(a,b,c,d,e,f,g,h,k,w){
   T1 t1;
   T2 t2;
   pipeline_register d0;
   pipeline_register d1;
   pipeline_register d2;
   pipeline_register d3;
   pipeline_register d4;
   pipeline_register d5;
   pipeline_register d6;
   pipeline_register d7;
#
   e -> t1:0;
   f -> t1:1;
   g -> t1:2;
   h -> t1:3;
   k -> t1:4;
   w -> t1:5;

   a -> t2:0;
   b -> t2:1;
   c -> t2:2;

   a1 = t1 + t2;
   a2 = d + t1;

   a1 -> d0; // a
   a -> d1;  // b
   b -> d2;  // c
   c -> d3;  // d
   a2 -> d4; // e
   e -> d5;  // f
   f -> d6;  // g
   g -> d7;  // h

   d0 -> out:0;
   d1 -> out:1;
   d2 -> out:2;
   d3 -> out:3;
   d4 -> out:4;
   d5 -> out:5;
   d6 -> out:6;
   d7 -> out:7;
}

module F(a,b,c,d,e,f,g,h,k,w){
   F_Stage f0;
   F_Stage f1;
   F_Stage f2;
   F_Stage f3;
   F_Stage f4;
   F_Stage f5;
   F_Stage f6;
   F_Stage f7;
   F_Stage f8;
   F_Stage f9;
   F_Stage fa;
   F_Stage fb;
   F_Stage fc;
   F_Stage fd;
   F_Stage fe;
   F_Stage ff;
#
   a ->  f0:0;
   b ->  f0:1;
   c ->  f0:2;
   d ->  f0:3;
   e ->  f0:4;
   f ->  f0:5;
   g ->  f0:6;
   h ->  f0:7;
   k[0] -> f0:8;
   w[0] -> f0:9;

   f0:0..7 -> f1:0..7;
   k[1] -> f1:8;
   w[1] -> f1:9;

   f1:0..7 -> f2:0..7;
   k[2] -> f2:8;
   w[2] -> f2:9;

   f2:0..7 -> f3:0..7;
   k[3] -> f3:8;
   w[3] -> f3:9;

   f3:0..7 -> f4:0..7;
   k[4] -> f4:8;
   w[4] -> f4:9;

   f4:0..7 -> f5:0..7;
   k[5] -> f5:8;
   w[5] -> f5:9;

   f5:0..7 -> f6:0..7;
   k[6] -> f6:8;
   w[6] -> f6:9;

   f6:0..7 -> f7:0..7;
   k[7] -> f7:8;
   w[7] -> f7:9;

   f7:0..7 -> f8:0..7;
   k[8] -> f8:8;
   w[8] -> f8:9;

   f8:0..7 -> f9:0..7;
   k[9] -> f9:8;
   w[9] -> f9:9;

   f9:0..7 -> fa:0..7;
   k[10] -> fa:8;
   w[10] -> fa:9;

   fa:0..7 -> fb:0..7;
   k[11] -> fb:8;
   w[11] -> fb:9;

   fb:0..7 -> fc:0..7;
   k[12] -> fc:8;
   w[12] -> fc:9;

   fc:0..7 -> fd:0..7;
   k[13] -> fd:8;
   w[13] -> fd:9;

   fd:0..7 -> fe:0..7;
   k[14] -> fe:8;
   w[14] -> fe:9;

   fe:0..7 -> ff:0..7;
   k[15] -> ff:8;
   w[15] -> ff:9;

   ff:0..7 -> out:0..7;
}

// Simple grouping of state so it appears better on the graphs
module ShaState(x0,x1,x2,x3,x4,x5,x6,x7){
   ShaSingleState s0;
   ShaSingleState s1;
   ShaSingleState s2;
   ShaSingleState s3;
   ShaSingleState s4;
   ShaSingleState s5;
   ShaSingleState s6;
   ShaSingleState s7;
#
   x0 -> s0;
   x1 -> s1;
   x2 -> s2;
   x3 -> s3;
   x4 -> s4;
   x5 -> s5;
   x6 -> s6;
   x7 -> s7;

   s0 -> out:0;
   s1 -> out:1;
   s2 -> out:2;
   s3 -> out:3;
   s4 -> out:4;
   s5 -> out:5;
   s6 -> out:6;
   s7 -> out:7;
}

module SHA(){
   vread MemRead;
   xunitF F0;
   xunitF F1;
   xunitF F2;
   xunitF F3;
   xunitM M0;
   xunitM M1;
   xunitM M2;
   xmem cMem0(1,16,16,0,0,1){0x428a2f98,0x71374491,0xb5c0fbcf,0xe9b5dba5,0x3956c25b,0x59f111f1,0x923f82a4,0xab1c5ed5,0xd807aa98,0x12835b01,0x243185be,0x550c7dc3,0x72be5d74,0x80deb1fe,0x9bdc06a7,0xc19bf174};
   xmem cMem1(1,16,16,0,0,1){0xe49b69c1,0xefbe4786,0x0fc19dc6,0x240ca1cc,0x2de92c6f,0x4a7484aa,0x5cb0a9dc,0x76f988da,0x983e5152,0xa831c66d,0xb00327c8,0xbf597fc7,0xc6e00bf3,0xd5a79147,0x06ca6351,0x14292967};
   xmem cMem2(1,16,16,0,0,1){0x27b70a85,0x2e1b2138,0x4d2c6dfc,0x53380d13,0x650a7354,0x766a0abb,0x81c2c92e,0x92722c85,0xa2bfe8a1,0xa81a664b,0xc24b8b70,0xc76c51a3,0xd192e819,0xd6990624,0xf40e3585,0x106aa070};
   xmem cMem3(1,16,16,0,0,1){0x19a4c116,0x1e376c08,0x2748774c,0x34b0bcb5,0x391c0cb3,0x4ed8aa4a,0x5b9cca4f,0x682e6ff3,0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2};
   ShaState State;
#
   State:0..7 -> F0:0..7;
   cMem0      -> F0:8;
   MemRead    -> F0:9;

   F0:0..7    -> F1:0..7;
   cMem1      -> F1:8;
   M0         -> F1:9;

   F1:0..7    -> F2:0..7;
   cMem2      -> F2:8;
   M1         -> F2:9;

   F2:0..7    -> F3:0..7;
   cMem3      -> F3:8;
   M2         -> F3:9;

   MemRead  -> M0;
   M0       -> M1;
   M1       -> M2;
   
   F3:0..7 -> State:0..7;
}

/*
module 2Box(x0,x1){
   xmem table;
#
   x0:0 -> table:0;
   x1:1 -> table:1;

   table:0 -> out:0;
   table:1 -> out:1;
}

module SBox(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,xa,xb,xc,xd,xe,xf){
   2Box s1;
   2Box s2;
   2Box s3;
   2Box s4;
   2Box s5;
   2Box s6;
   2Box s7;
   2Box s8;
#
   x0 -> s1:0;
   x1 -> s1:1;

   x2 -> s2:0;
   x3 -> s2:1;

   x4 -> s3:0;
   x5 -> s3:1;

   x6 -> s4:0;
   x7 -> s4:1;

   x8 -> s5:0;
   x9 -> s5:1;

   xa -> s6:0;
   xb -> s6:1;

   xc -> s7:0;
   xd -> s7:1;

   xe -> s8:0;
   xf -> s8:1;

   s1:0 -> out:0;
   s1:1 -> out:1;
   s2:0 -> out:2;
   s2:1 -> out:3;
   s3:0 -> out:4;
   s3:1 -> out:5;
   s4:0 -> out:6;
   s4:1 -> out:7;
   s5:0 -> out:8;
   s5:1 -> out:9;
   s6:0 -> out:10;
   s6:1 -> out:11;
   s7:0 -> out:12;
   s7:1 -> out:13;
   s8:0 -> out:14;
   s8:1 -> out:15;
}

module ShiftRows(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,xa,xb,xc,xd,xe,xf){
   #
   // First row
   x0 -> out:0;
   x4 -> out:4;
   x8 -> out:8;
   xc -> out:12;

   // Second row
   x5 -> out:1;
   x9 -> out:5;
   xd -> out:9;
   x1 -> out:13;

   // Third row
   xa -> out:2;
   xe -> out:6;
   x2 -> out:10;
   x6 -> out:14;

   // Fourth row
   xf -> out:3;
   x3 -> out:7;
   x7 -> out:11;
   xb -> out:15;
}

module MixProduct(x11,x12,x2,x3){
#
   a1 = x2 + x2;
   
   b1 = x3 + x3;
   b2 = x3 + b1;

   c1 = x11 + x12;
   c2 = a1 + b2;

   d = c1 + c2;

   d -> out;
}

module DoRow(x0,x1,x2,x3){
   MixProduct m1;
   MixProduct m2;
   MixProduct m3;
   MixProduct m4;
#
   x0 -> m1:2;
   x1 -> m1:3;
   x2 -> m1:0;
   x3 -> m1:1;

   x0 -> m2:0;
   x1 -> m2:2;
   x2 -> m2:3;
   x3 -> m2:1;

   x0 -> m3:0;
   x1 -> m3:1;
   x2 -> m3:2;
   x3 -> m3:3;

   x0 -> m4:3;
   x1 -> m4:0;
   x2 -> m4:1;
   x3 -> m4:2;

   m1 -> out:0;
   m2 -> out:1;
   m3 -> out:2;
   m4 -> out:3;
}

module MixColumns(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,xa,xb,xc,xd,xe,xf){
   DoRow d1;
   DoRow d2;
   DoRow d3;
   DoRow d4;
#
   x0 -> d1:0;
   x1 -> d1:1;
   x2 -> d1:2;
   x3 -> d1:3;

   x4 -> d2:0;
   x5 -> d2:1;
   x6 -> d2:2;
   x7 -> d2:3;

   x8 -> d3:0;
   x9 -> d3:1;
   xa -> d3:2;
   xb -> d3:3;

   xc -> d4:0;
   xd -> d4:1;
   xe -> d4:2;
   xf -> d4:3;

   d1:0 -> out:0;
   d1:1 -> out:1;
   d1:2 -> out:2;
   d1:3 -> out:3;
   
   d2:0 -> out:4;
   d2:1 -> out:5;
   d2:2 -> out:6;
   d2:3 -> out:7;

   d3:0 -> out:8;
   d3:1 -> out:9;
   d3:2 -> out:10;
   d3:3 -> out:11;
   
   d4:0 -> out:12;
   d4:1 -> out:13;
   d4:2 -> out:14;
   d4:3 -> out:15;
}

module AddRoundKey(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,xa,xb,xc,xd,xe,xf,y0,y1,y2,y3,y4,y5,y6,y7,y8,y9,ya,yb,yc,yd,ye,yf){
#
   a0 = x0 ^ y0;
   a1 = x1 ^ y1;
   a2 = x2 ^ y2;
   a3 = x3 ^ y3;
   a4 = x4 ^ y4;
   a5 = x5 ^ y5;
   a6 = x6 ^ y6;
   a7 = x7 ^ y7;
   a8 = x8 ^ y8;
   a9 = x9 ^ y9;
   aa = xa ^ ya;
   ab = xb ^ yb;
   ac = xc ^ yc;
   ad = xd ^ yd;
   ae = xe ^ ye;
   af = xf ^ yf;

   a0 -> out:0;
   a1 -> out:1;
   a2 -> out:2;
   a3 -> out:3;
   a4 -> out:4;
   a5 -> out:5;
   a6 -> out:6;
   a7 -> out:7;
   a8 -> out:8;
   a9 -> out:9;
   aa -> out:10;
   ab -> out:11;
   ac -> out:12;
   ad -> out:13;
   ae -> out:14;
   af -> out:15;
}

module RotWord(x0,x1,x2,x3){
#
   x0 -> out:3;
   x1 -> out:0;
   x2 -> out:1;
   x3 -> out:2;
}

module FirstLineKey(x0,x1,x2,x3,w0,w1,w2,w3,rcon){
   RotWord rot;
   2Box b1;
   2Box b2;
#
   x0 -> rot:0;
   x1 -> rot:1;
   x2 -> rot:2;
   x3 -> rot:3;

   rot:0 -> b1:0;
   rot:1 -> b1:1;

   rot:2 -> b2:0;
   rot:3 -> b2:1;

   a1 = b1:0 ^ w0;

   d1 = a1 ^ rcon;
   d2 = b1:1 ^ w1;
   d3 = b2:0 ^ w2;
   d4 = b2:1 ^ w3;

   d1 -> out:0; 
   d2 -> out:1; 
   d3 -> out:2; 
   d4 -> out:3; 
}

module KeySchedule(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,xa,xb,xc,xd,xe,xf,rcon){
   FirstLineKey s;
#
   xc -> s:0;
   xd -> s:1;
   xe -> s:2;
   xf -> s:3;
   x0 -> s:4;
   x1 -> s:5;
   x2 -> s:6;
   x3 -> s:7;
   rcon -> s:8;

   a1 = s:0 ^ x4;
   a2 = s:1 ^ x5;
   a3 = s:2 ^ x6;
   a4 = s:3 ^ x7;

   b1 = a1 ^ x8;
   b2 = a2 ^ x9;
   b3 = a3 ^ xa;
   b4 = a3 ^ xb;

   c1 = b1 ^ xc;
   c2 = b2 ^ xd;
   c3 = b3 ^ xe;
   c4 = b3 ^ xf;

   s:0 -> out:0;
   s:1 -> out:1;
   s:2 -> out:2;
   s:3 -> out:3;
   a1 -> out:4;
   a2 -> out:5;
   a3 -> out:6;
   a4 -> out:7;
   b1 -> out:8;
   b2 -> out:9;
   b3 -> out:10;
   b4 -> out:11;
   c1 -> out:12;
   c2 -> out:13;
   c3 -> out:14;
   c4 -> out:15;
}

module P1(x,y,z){
#
   a = x + y;
   b = a + z;

   b -> out;
}
*/
