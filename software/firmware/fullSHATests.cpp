#include "fullSHATests.hpp"

// extern "C"{
// #define NUM_MSGS (65)
// unsigned char msg_0_sha[] = { 0x00 };
// unsigned char msg_1_sha[] = { 0xd3 };
// unsigned char msg_2_sha[] = { 0x11, 0xaf };
// unsigned char msg_3_sha[] = { 0xb4, 0x19, 0x0e };
// unsigned char msg_4_sha[] = { 0x74, 0xba, 0x25, 0x21 };
// unsigned char msg_5_sha[] = { 0xc2, 0x99, 0x20, 0x96, 0x82 };
// unsigned char msg_6_sha[] = { 0xe1, 0xdc, 0x72, 0x4d, 0x56, 0x21 };
// unsigned char msg_7_sha[] = { 0x06, 0xe0, 0x76, 0xf5, 0xa4, 0x42, 0xd5 };
// unsigned char msg_8_sha[] = { 0x57, 0x38, 0xc9, 0x29, 0xc4, 0xf4, 0xcc, 0xb6 };
// unsigned char msg_9_sha[] = { 0x33, 0x34, 0xc5, 0x80, 0x75, 0xd3, 0xf4, 0x13, 0x9e };
// unsigned char msg_10_sha[] = { 0x74, 0xcb, 0x93, 0x81, 0xd8, 0x9f, 0x5a, 0xa7, 0x33, 0x68 };
// unsigned char msg_11_sha[] = { 0x76, 0xed, 0x24, 0xa0, 0xf4, 0x0a, 0x41, 0x22, 0x1e, 0xbf, 0xcf };
// unsigned char msg_12_sha[] = { 0x9b, 0xaf, 0x69, 0xcb, 0xa3, 0x17, 0xf4, 0x22, 0xfe, 0x26, 0xa9, 0xa0 };
// unsigned char msg_13_sha[] = { 0x68, 0x51, 0x1c, 0xdb, 0x2d, 0xbb, 0xf3, 0x53, 0x0d, 0x7f, 0xb6, 0x1c, 0xbc };
// unsigned char msg_14_sha[] = { 0xaf, 0x39, 0x7a, 0x8b, 0x8d, 0xd7, 0x3a, 0xb7, 0x02, 0xce, 0x8e, 0x53, 0xaa, 0x9f };
// unsigned char msg_15_sha[] = { 0x29, 0x4a, 0xf4, 0x80, 0x2e, 0x5e, 0x92, 0x5e, 0xb1, 0xc6, 0xcc, 0x9c, 0x72, 0x4f, 0x09 };
// unsigned char msg_16_sha[] = { 0x0a, 0x27, 0x84, 0x7c, 0xdc, 0x98, 0xbd, 0x6f, 0x62, 0x22, 0x0b, 0x04, 0x6e, 0xdd, 0x76, 0x2b };
// unsigned char msg_17_sha[] = { 0x1b, 0x50, 0x3f, 0xb9, 0xa7, 0x3b, 0x16, 0xad, 0xa3, 0xfc, 0xf1, 0x04, 0x26, 0x23, 0xae, 0x76, 0x10 };
// unsigned char msg_18_sha[] = { 0x59, 0xeb, 0x45, 0xbb, 0xbe, 0xb0, 0x54, 0xb0, 0xb9, 0x73, 0x34, 0xd5, 0x35, 0x80, 0xce, 0x03, 0xf6, 0x99 };
// unsigned char msg_19_sha[] = { 0x58, 0xe5, 0xa3, 0x25, 0x9c, 0xb0, 0xb6, 0xd1, 0x2c, 0x83, 0xf7, 0x23, 0x37, 0x9e, 0x35, 0xfd, 0x29, 0x8b, 0x60 };
// unsigned char msg_20_sha[] = { 0xc1, 0xef, 0x39, 0xce, 0xe5, 0x8e, 0x78, 0xf6, 0xfc, 0xdc, 0x12, 0xe0, 0x58, 0xb7, 0xf9, 0x02, 0xac, 0xd1, 0xa9, 0x3b };
// unsigned char msg_21_sha[] = { 0x9c, 0xab, 0x7d, 0x7d, 0xca, 0xec, 0x98, 0xcb, 0x3a, 0xc6, 0xc6, 0x4d, 0xd5, 0xd4, 0x47, 0x0d, 0x0b, 0x10, 0x3a, 0x81, 0x0c };
// unsigned char msg_22_sha[] = { 0xea, 0x15, 0x7c, 0x02, 0xeb, 0xaf, 0x1b, 0x22, 0xde, 0x22, 0x1b, 0x53, 0xf2, 0x35, 0x39, 0x36, 0xd2, 0x35, 0x9d, 0x1e, 0x1c, 0x97 };
// unsigned char msg_23_sha[] = { 0xda, 0x99, 0x9b, 0xc1, 0xf9, 0xc7, 0xac, 0xff, 0x32, 0x82, 0x8a, 0x73, 0xe6, 0x72, 0xd0, 0xa4, 0x92, 0xf6, 0xee, 0x89, 0x5c, 0x68, 0x67 };
// unsigned char msg_24_sha[] = { 0x47, 0x99, 0x13, 0x01, 0x15, 0x6d, 0x1d, 0x97, 0x7c, 0x03, 0x38, 0xef, 0xbc, 0xad, 0x41, 0x00, 0x41, 0x33, 0xae, 0xfb, 0xca, 0x6b, 0xcf, 0x7e };
// unsigned char msg_25_sha[] = { 0x2e, 0x7e, 0xa8, 0x4d, 0xa4, 0xbc, 0x4d, 0x7c, 0xfb, 0x46, 0x3e, 0x3f, 0x2c, 0x86, 0x47, 0x05, 0x7a, 0xff, 0xf3, 0xfb, 0xec, 0xec, 0xa1, 0xd2, 0x00 };
// unsigned char msg_26_sha[] = { 0x47, 0xc7, 0x70, 0xeb, 0x45, 0x49, 0xb6, 0xef, 0xf6, 0x38, 0x1d, 0x62, 0xe9, 0xbe, 0xb4, 0x64, 0xcd, 0x98, 0xd3, 0x41, 0xcc, 0x1c, 0x09, 0x98, 0x1a, 0x7a };
// unsigned char msg_27_sha[] = { 0xac, 0x4c, 0x26, 0xd8, 0xb4, 0x3b, 0x85, 0x79, 0xd8, 0xf6, 0x1c, 0x98, 0x07, 0x02, 0x6e, 0x83, 0xe9, 0xb5, 0x86, 0xe1, 0x15, 0x9b, 0xd4, 0x3b, 0x85, 0x19, 0x37 };
// unsigned char msg_28_sha[] = { 0x07, 0x77, 0xfc, 0x1e, 0x1c, 0xa4, 0x73, 0x04, 0xc2, 0xe2, 0x65, 0x69, 0x28, 0x38, 0x10, 0x9e, 0x26, 0xaa, 0xb9, 0xe5, 0xc4, 0xae, 0x4e, 0x86, 0x00, 0xdf, 0x4b, 0x1f };
// unsigned char msg_29_sha[] = { 0x1a, 0x57, 0x25, 0x1c, 0x43, 0x1d, 0x4e, 0x6c, 0x2e, 0x06, 0xd6, 0x52, 0x46, 0xa2, 0x96, 0x91, 0x50, 0x71, 0xa5, 0x31, 0x42, 0x5e, 0xcf, 0x25, 0x59, 0x89, 0x42, 0x2a, 0x66 };
// unsigned char msg_30_sha[] = { 0x9b, 0x24, 0x5f, 0xda, 0xd9, 0xba, 0xeb, 0x89, 0x0d, 0x9c, 0x0d, 0x0e, 0xff, 0x81, 0x6e, 0xfb, 0x4c, 0xa1, 0x38, 0x61, 0x0b, 0xc7, 0xd7, 0x8c, 0xb1, 0xa8, 0x01, 0xed, 0x32, 0x73 };
// unsigned char msg_31_sha[] = { 0x95, 0xa7, 0x65, 0x80, 0x9c, 0xaf, 0x30, 0xad, 0xa9, 0x0a, 0xd6, 0xd6, 0x1c, 0x2b, 0x4b, 0x30, 0x25, 0x0d, 0xf0, 0xa7, 0xce, 0x23, 0xb7, 0x75, 0x3c, 0x91, 0x87, 0xf4, 0x31, 0x9c, 0xe2 };
// unsigned char msg_32_sha[] = { 0x09, 0xfc, 0x1a, 0xcc, 0xc2, 0x30, 0xa2, 0x05, 0xe4, 0xa2, 0x08, 0xe6, 0x4a, 0x8f, 0x20, 0x42, 0x91, 0xf5, 0x81, 0xa1, 0x27, 0x56, 0x39, 0x2d, 0xa4, 0xb8, 0xc0, 0xcf, 0x5e, 0xf0, 0x2b, 0x95 };
// unsigned char msg_33_sha[] = { 0x05, 0x46, 0xf7, 0xb8, 0x68, 0x2b, 0x5b, 0x95, 0xfd, 0x32, 0x38, 0x5f, 0xaf, 0x25, 0x85, 0x4c, 0xb3, 0xf7, 0xb4, 0x0c, 0xc8, 0xfa, 0x22, 0x9f, 0xbd, 0x52, 0xb1, 0x69, 0x34, 0xaa, 0xb3, 0x88, 0xa7 };
// unsigned char msg_34_sha[] = { 0xb1, 0x2d, 0xb4, 0xa1, 0x02, 0x55, 0x29, 0xb3, 0xb7, 0xb1, 0xe4, 0x5c, 0x6d, 0xbc, 0x7b, 0xaa, 0x88, 0x97, 0xa0, 0x57, 0x6e, 0x66, 0xf6, 0x4b, 0xf3, 0xf8, 0x23, 0x61, 0x13, 0xa6, 0x27, 0x6e, 0xe7, 0x7d };
// unsigned char msg_35_sha[] = { 0xe6, 0x8c, 0xb6, 0xd8, 0xc1, 0x86, 0x6c, 0x0a, 0x71, 0xe7, 0x31, 0x3f, 0x83, 0xdc, 0x11, 0xa5, 0x80, 0x9c, 0xf5, 0xcf, 0xbe, 0xed, 0x1a, 0x58, 0x7c, 0xe9, 0xc2, 0xc9, 0x2e, 0x02, 0x2a, 0xbc, 0x16, 0x44, 0xbb };
// unsigned char msg_36_sha[] = { 0x4e, 0x3d, 0x8a, 0xc3, 0x6d, 0x61, 0xd9, 0xe5, 0x14, 0x80, 0x83, 0x11, 0x55, 0xb2, 0x53, 0xb3, 0x79, 0x69, 0xfe, 0x7e, 0xf4, 0x9d, 0xb3, 0xb3, 0x99, 0x26, 0xf3, 0xa0, 0x0b, 0x69, 0xa3, 0x67, 0x74, 0x36, 0x60, 0x00 };
// unsigned char msg_37_sha[] = { 0x03, 0xb2, 0x64, 0xbe, 0x51, 0xe4, 0xb9, 0x41, 0x86, 0x4f, 0x9b, 0x70, 0xb4, 0xc9, 0x58, 0xf5, 0x35, 0x5a, 0xac, 0x29, 0x4b, 0x4b, 0x87, 0xcb, 0x03, 0x7f, 0x11, 0xf8, 0x5f, 0x07, 0xeb, 0x57, 0xb3, 0xf0, 0xb8, 0x95, 0x50 };
// unsigned char msg_38_sha[] = { 0xd0, 0xfe, 0xfd, 0x96, 0x78, 0x7c, 0x65, 0xff, 0xa7, 0xf9, 0x10, 0xd6, 0xd0, 0xad, 0xa6, 0x3d, 0x64, 0xd5, 0xc4, 0x67, 0x99, 0x60, 0xe7, 0xf0, 0x6a, 0xeb, 0x8c, 0x70, 0xdf, 0xef, 0x95, 0x4f, 0x8e, 0x39, 0xef, 0xdb, 0x62, 0x9b };
// unsigned char msg_39_sha[] = { 0xb7, 0xc7, 0x9d, 0x7e, 0x5f, 0x1e, 0xec, 0xcd, 0xfe, 0xdf, 0x0e, 0x7b, 0xf4, 0x3e, 0x73, 0x0d, 0x44, 0x7e, 0x60, 0x7d, 0x8d, 0x14, 0x89, 0x82, 0x3d, 0x09, 0xe1, 0x12, 0x01, 0xa0, 0xb1, 0x25, 0x80, 0x39, 0xe7, 0xbd, 0x48, 0x75, 0xb1 };
// unsigned char msg_40_sha[] = { 0x64, 0xcd, 0x36, 0x3e, 0xcc, 0xe0, 0x5f, 0xdf, 0xda, 0x24, 0x86, 0xd0, 0x11, 0xa3, 0xdb, 0x95, 0xb5, 0x20, 0x6a, 0x19, 0xd3, 0x05, 0x40, 0x46, 0x81, 0x9d, 0xd0, 0xd3, 0x67, 0x83, 0x95, 0x5d, 0x7e, 0x5b, 0xf8, 0xba, 0x18, 0xbf, 0x73, 0x8a };
// unsigned char msg_41_sha[] = { 0x6a, 0xc6, 0xc6, 0x3d, 0x61, 0x8e, 0xaf, 0x00, 0xd9, 0x1c, 0x5e, 0x28, 0x07, 0xe8, 0x3c, 0x09, 0x39, 0x12, 0xb8, 0xe2, 0x02, 0xf7, 0x8e, 0x13, 0x97, 0x03, 0x49, 0x8a, 0x79, 0xc6, 0x06, 0x7f, 0x54, 0x49, 0x7c, 0x61, 0x27, 0xa2, 0x39, 0x10, 0xa6 };
// unsigned char msg_42_sha[] = { 0xd2, 0x68, 0x26, 0xdb, 0x9b, 0xae, 0xaa, 0x89, 0x26, 0x91, 0xb6, 0x89, 0x00, 0xb9, 0x61, 0x63, 0x20, 0x8e, 0x80, 0x6a, 0x1d, 0xa0, 0x77, 0x42, 0x9e, 0x45, 0x4f, 0xa0, 0x11, 0x84, 0x09, 0x51, 0xa0, 0x31, 0x32, 0x7e, 0x60, 0x5a, 0xb8, 0x2e, 0xcc, 0xe2 };
// unsigned char msg_43_sha[] = { 0x3f, 0x7a, 0x05, 0x9b, 0x65, 0xd6, 0xcb, 0x02, 0x49, 0x20, 0x4a, 0xac, 0x10, 0xb9, 0xf1, 0xa4, 0xac, 0x9e, 0x58, 0x68, 0xad, 0xeb, 0xbe, 0x93, 0x5a, 0x9e, 0xb5, 0xb9, 0x01, 0x9e, 0x1c, 0x93, 0x8b, 0xfc, 0x4e, 0x5c, 0x53, 0x78, 0x99, 0x7a, 0x39, 0x47, 0xf2 };
// unsigned char msg_44_sha[] = { 0x60, 0xff, 0xcb, 0x23, 0xd6, 0xb8, 0x8e, 0x48, 0x5b, 0x92, 0x0a, 0xf8, 0x1d, 0x10, 0x83, 0xf6, 0x29, 0x1d, 0x06, 0xac, 0x8c, 0xa3, 0xa9, 0x65, 0xb8, 0x59, 0x14, 0xbc, 0x2a, 0xdd, 0x40, 0x54, 0x4a, 0x02, 0x7f, 0xca, 0x93, 0x6b, 0xbd, 0xe8, 0xf3, 0x59, 0x05, 0x1c };
// unsigned char msg_45_sha[] = { 0x9e, 0xcd, 0x07, 0xb6, 0x84, 0xbb, 0x9e, 0x0e, 0x66, 0x92, 0xe3, 0x20, 0xce, 0xc4, 0x51, 0x0c, 0xa7, 0x9f, 0xcd, 0xb3, 0xa2, 0x21, 0x2c, 0x26, 0xd9, 0x0d, 0xf6, 0x5d, 0xb3, 0x3e, 0x69, 0x2d, 0x07, 0x3c, 0xc1, 0x74, 0x84, 0x0d, 0xb7, 0x97, 0x50, 0x4e, 0x48, 0x2e, 0xef };
// unsigned char msg_46_sha[] = { 0x9d, 0x64, 0xde, 0x71, 0x61, 0x89, 0x58, 0x84, 0xe7, 0xfa, 0x3d, 0x6e, 0x9e, 0xb9, 0x96, 0xe7, 0xeb, 0xe5, 0x11, 0xb0, 0x1f, 0xe1, 0x9c, 0xd4, 0xa6, 0xb3, 0x32, 0x2e, 0x80, 0xaa, 0xf5, 0x2b, 0xf6, 0x44, 0x7e, 0xd1, 0x85, 0x4e, 0x71, 0x00, 0x1f, 0x4d, 0x54, 0xf8, 0x93, 0x1d };
// unsigned char msg_47_sha[] = { 0xc4, 0xad, 0x3c, 0x5e, 0x78, 0xd9, 0x17, 0xec, 0xb0, 0xcb, 0xbc, 0xd1, 0xc4, 0x81, 0xfc, 0x2a, 0xaf, 0x23, 0x2f, 0x7e, 0x28, 0x97, 0x79, 0xf4, 0x0e, 0x50, 0x4c, 0xc3, 0x09, 0x66, 0x2e, 0xe9, 0x6f, 0xec, 0xbd, 0x20, 0x64, 0x7e, 0xf0, 0x0e, 0x46, 0x19, 0x9f, 0xbc, 0x48, 0x2f, 0x46 };
// unsigned char msg_48_sha[] = { 0x4e, 0xef, 0x51, 0x07, 0x45, 0x9b, 0xdd, 0xf8, 0xf2, 0x4f, 0xc7, 0x65, 0x6f, 0xd4, 0x89, 0x6d, 0xa8, 0x71, 0x1d, 0xb5, 0x04, 0x00, 0xc0, 0x16, 0x48, 0x47, 0xf6, 0x92, 0xb8, 0x86, 0xce, 0x8d, 0x7f, 0x4d, 0x67, 0x39, 0x50, 0x90, 0xb3, 0x53, 0x4e, 0xfd, 0x7b, 0x0d, 0x29, 0x8d, 0xa3, 0x4b };
// unsigned char msg_49_sha[] = { 0x04, 0x7d, 0x27, 0x58, 0xe7, 0xc2, 0xc9, 0x62, 0x3f, 0x9b, 0xdb, 0x93, 0xb6, 0x59, 0x7c, 0x5e, 0x84, 0xa0, 0xcd, 0x34, 0xe6, 0x10, 0x01, 0x4b, 0xcb, 0x25, 0xb4, 0x9e, 0xd0, 0x5c, 0x7e, 0x35, 0x6e, 0x98, 0xc7, 0xa6, 0x72, 0xc3, 0xdd, 0xdc, 0xae, 0xb8, 0x43, 0x17, 0xef, 0x61, 0x4d, 0x34, 0x2f };
// unsigned char msg_50_sha[] = { 0x3d, 0x83, 0xdf, 0x37, 0x17, 0x2c, 0x81, 0xaf, 0xd0, 0xde, 0x11, 0x51, 0x39, 0xfb, 0xf4, 0x39, 0x0c, 0x22, 0xe0, 0x98, 0xc5, 0xaf, 0x4c, 0x5a, 0xb4, 0x85, 0x24, 0x06, 0x51, 0x0b, 0xc0, 0xe6, 0xcf, 0x74, 0x17, 0x69, 0xf4, 0x44, 0x30, 0xc5, 0x27, 0x0f, 0xda, 0xe0, 0xcb, 0x84, 0x9d, 0x71, 0xcb, 0xab };
// unsigned char msg_51_sha[] = { 0x33, 0xfd, 0x9b, 0xc1, 0x7e, 0x2b, 0x27, 0x1f, 0xa0, 0x4c, 0x6b, 0x93, 0xc0, 0xbd, 0xea, 0xe9, 0x86, 0x54, 0xa7, 0x68, 0x2d, 0x31, 0xd9, 0xb4, 0xda, 0xb7, 0xe6, 0xf3, 0x2c, 0xd5, 0x8f, 0x2f, 0x14, 0x8a, 0x68, 0xfb, 0xe7, 0xa8, 0x8c, 0x5a, 0xb1, 0xd8, 0x8e, 0xdc, 0xcd, 0xde, 0xb3, 0x0a, 0xb2, 0x1e, 0x5e };
// unsigned char msg_52_sha[] = { 0x77, 0xa8, 0x79, 0xcf, 0xa1, 0x1d, 0x7f, 0xca, 0xc7, 0xa8, 0x28, 0x2c, 0xc3, 0x8a, 0x43, 0xdc, 0xf3, 0x76, 0x43, 0xcc, 0x90, 0x98, 0x37, 0x21, 0x3b, 0xd6, 0xfd, 0x95, 0xd9, 0x56, 0xb2, 0x19, 0xa1, 0x40, 0x6c, 0xbe, 0x73, 0xc5, 0x2c, 0xd5, 0x6c, 0x60, 0x0e, 0x55, 0xb7, 0x5b, 0xc3, 0x7e, 0xa6, 0x96, 0x41, 0xbc };
// unsigned char msg_53_sha[] = { 0x45, 0xa3, 0xe6, 0xb8, 0x65, 0x27, 0xf2, 0x0b, 0x45, 0x37, 0xf5, 0xaf, 0x96, 0xcf, 0xc5, 0xad, 0x87, 0x77, 0xa2, 0xdd, 0xe6, 0xcf, 0x75, 0x11, 0x88, 0x6c, 0x55, 0x90, 0xec, 0xe2, 0x4f, 0xc6, 0x1b, 0x22, 0x67, 0x39, 0xd2, 0x07, 0xda, 0xbf, 0xe3, 0x2b, 0xa6, 0xef, 0xd9, 0xff, 0x4c, 0xd5, 0xdb, 0x1b, 0xd5, 0xea, 0xd3 };
// unsigned char msg_54_sha[] = { 0x25, 0x36, 0x2a, 0x4b, 0x9d, 0x74, 0xbd, 0xe6, 0x12, 0x8c, 0x4f, 0xdc, 0x67, 0x23, 0x05, 0x90, 0x09, 0x47, 0xbc, 0x3a, 0xda, 0x9d, 0x9d, 0x31, 0x6e, 0xbc, 0xf1, 0x66, 0x7a, 0xd4, 0x36, 0x31, 0x89, 0x93, 0x72, 0x51, 0xf1, 0x49, 0xc7, 0x2e, 0x06, 0x4a, 0x48, 0x60, 0x8d, 0x94, 0x0b, 0x75, 0x74, 0xb1, 0x7f, 0xef, 0xc0, 0xdf };
// unsigned char msg_55_sha[] = { 0x3e, 0xbf, 0xb0, 0x6d, 0xb8, 0xc3, 0x8d, 0x5b, 0xa0, 0x37, 0xf1, 0x36, 0x3e, 0x11, 0x85, 0x50, 0xaa, 0xd9, 0x46, 0x06, 0xe2, 0x68, 0x35, 0xa0, 0x1a, 0xf0, 0x50, 0x78, 0x53, 0x3c, 0xc2, 0x5f, 0x2f, 0x39, 0x57, 0x3c, 0x04, 0xb6, 0x32, 0xf6, 0x2f, 0x68, 0xc2, 0x94, 0xab, 0x31, 0xf2, 0xa3, 0xe2, 0xa1, 0xa0, 0xd8, 0xc2, 0xbe, 0x51 };
// unsigned char msg_56_sha[] = { 0x2d, 0x52, 0x44, 0x7d, 0x12, 0x44, 0xd2, 0xeb, 0xc2, 0x86, 0x50, 0xe7, 0xb0, 0x56, 0x54, 0xba, 0xd3, 0x5b, 0x3a, 0x68, 0xee, 0xdc, 0x7f, 0x85, 0x15, 0x30, 0x6b, 0x49, 0x6d, 0x75, 0xf3, 0xe7, 0x33, 0x85, 0xdd, 0x1b, 0x00, 0x26, 0x25, 0x02, 0x4b, 0x81, 0xa0, 0x2f, 0x2f, 0xd6, 0xdf, 0xfb, 0x6e, 0x6d, 0x56, 0x1c, 0xb7, 0xd0, 0xbd, 0x7a };
// unsigned char msg_57_sha[] = { 0x4c, 0xac, 0xe4, 0x22, 0xe4, 0xa0, 0x15, 0xa7, 0x54, 0x92, 0xb3, 0xb3, 0xbb, 0xfb, 0xdf, 0x37, 0x58, 0xea, 0xff, 0x4f, 0xe5, 0x04, 0xb4, 0x6a, 0x26, 0xc9, 0x0d, 0xac, 0xc1, 0x19, 0xfa, 0x90, 0x50, 0xf6, 0x03, 0xd2, 0xb5, 0x8b, 0x39, 0x8c, 0xad, 0x6d, 0x6d, 0x9f, 0xa9, 0x22, 0xa1, 0x54, 0xd9, 0xe0, 0xbc, 0x43, 0x89, 0x96, 0x82, 0x74, 0xb0 };
// unsigned char msg_58_sha[] = { 0x86, 0x20, 0xb8, 0x6f, 0xbc, 0xaa, 0xce, 0x4f, 0xf3, 0xc2, 0x92, 0x1b, 0x84, 0x66, 0xdd, 0xd7, 0xba, 0xca, 0xe0, 0x7e, 0xef, 0xef, 0x69, 0x3c, 0xf1, 0x77, 0x62, 0xdc, 0xab, 0xb8, 0x9a, 0x84, 0x01, 0x0f, 0xc9, 0xa0, 0xfb, 0x76, 0xce, 0x1c, 0x26, 0x59, 0x3a, 0xd6, 0x37, 0xa6, 0x12, 0x53, 0xf2, 0x24, 0xd1, 0xb1, 0x4a, 0x05, 0xad, 0xdc, 0xca, 0xbe };
// unsigned char msg_59_sha[] = { 0xd1, 0xbe, 0x3f, 0x13, 0xfe, 0xba, 0xfe, 0xfc, 0x14, 0x41, 0x4d, 0x9f, 0xb7, 0xf6, 0x93, 0xdb, 0x16, 0xdc, 0x1a, 0xe2, 0x70, 0xc5, 0xb6, 0x47, 0xd8, 0x0d, 0xa8, 0x58, 0x35, 0x87, 0xc1, 0xad, 0x8c, 0xb8, 0xcb, 0x01, 0x82, 0x43, 0x24, 0x41, 0x1c, 0xa5, 0xac, 0xe3, 0xca, 0x22, 0xe1, 0x79, 0xa4, 0xff, 0x49, 0x86, 0xf3, 0xf2, 0x11, 0x90, 0xf3, 0xd7, 0xf3 };
// unsigned char msg_60_sha[] = { 0xf4, 0x99, 0xcc, 0x3f, 0x6e, 0x3c, 0xf7, 0xc3, 0x12, 0xff, 0xdf, 0xba, 0x61, 0xb1, 0x26, 0x0c, 0x37, 0x12, 0x9c, 0x1a, 0xfb, 0x39, 0x10, 0x47, 0x19, 0x33, 0x67, 0xb7, 0xb2, 0xed, 0xeb, 0x57, 0x92, 0x53, 0xe5, 0x1d, 0x62, 0xba, 0x6d, 0x91, 0x1e, 0x7b, 0x81, 0x8c, 0xca, 0xe1, 0x55, 0x3f, 0x61, 0x46, 0xea, 0x78, 0x0f, 0x78, 0xe2, 0x21, 0x9f, 0x62, 0x93, 0x09 };
// unsigned char msg_61_sha[] = { 0x6d, 0xd6, 0xef, 0xd6, 0xf6, 0xca, 0xa6, 0x3b, 0x72, 0x9a, 0xa8, 0x18, 0x6e, 0x30, 0x8b, 0xc1, 0xbd, 0xa0, 0x63, 0x07, 0xc0, 0x5a, 0x2c, 0x0a, 0xe5, 0xa3, 0x68, 0x4e, 0x6e, 0x46, 0x08, 0x11, 0x74, 0x86, 0x90, 0xdc, 0x2b, 0x58, 0x77, 0x59, 0x67, 0xcf, 0xcc, 0x64, 0x5f, 0xd8, 0x20, 0x64, 0xb1, 0x27, 0x9f, 0xdc, 0xa7, 0x71, 0x80, 0x3d, 0xb9, 0xdc, 0xa0, 0xff, 0x53 };
// unsigned char msg_62_sha[] = { 0x65, 0x11, 0xa2, 0x24, 0x2d, 0xdb, 0x27, 0x31, 0x78, 0xe1, 0x9a, 0x82, 0xc5, 0x7c, 0x85, 0xcb, 0x05, 0xa6, 0x88, 0x7f, 0xf2, 0x01, 0x4c, 0xf1, 0xa3, 0x1c, 0xb9, 0xba, 0x5d, 0xf1, 0x69, 0x5a, 0xad, 0xb2, 0x5c, 0x22, 0xb3, 0xc5, 0xed, 0x51, 0xc1, 0x0d, 0x04, 0x7d, 0x25, 0x6b, 0x8e, 0x34, 0x42, 0x84, 0x2a, 0xe4, 0xe6, 0xc5, 0x25, 0xf8, 0xd7, 0xa5, 0xa9, 0x44, 0xaf, 0x2a };
// unsigned char msg_63_sha[] = { 0xe2, 0xf7, 0x6e, 0x97, 0x60, 0x6a, 0x87, 0x2e, 0x31, 0x74, 0x39, 0xf1, 0xa0, 0x3f, 0xcd, 0x92, 0xe6, 0x32, 0xe5, 0xbd, 0x4e, 0x7c, 0xbc, 0x4e, 0x97, 0xf1, 0xaf, 0xc1, 0x9a, 0x16, 0xfd, 0xe9, 0x2d, 0x77, 0xcb, 0xe5, 0x46, 0x41, 0x6b, 0x51, 0x64, 0x0c, 0xdd, 0xb9, 0x2a, 0xf9, 0x96, 0x53, 0x4d, 0xfd, 0x81, 0xed, 0xb1, 0x7c, 0x44, 0x24, 0xcf, 0x1a, 0xc4, 0xd7, 0x5a, 0xce, 0xeb };
// unsigned char msg_64_sha[] = { 0x5a, 0x86, 0xb7, 0x37, 0xea, 0xea, 0x8e, 0xe9, 0x76, 0xa0, 0xa2, 0x4d, 0xa6, 0x3e, 0x7e, 0xd7, 0xee, 0xfa, 0xd1, 0x8a, 0x10, 0x1c, 0x12, 0x11, 0xe2, 0xb3, 0x65, 0x0c, 0x51, 0x87, 0xc2, 0xa8, 0xa6, 0x50, 0x54, 0x72, 0x08, 0x25, 0x1f, 0x6d, 0x42, 0x37, 0xe6, 0x61, 0xc7, 0xbf, 0x4c, 0x77, 0xf3, 0x35, 0x39, 0x03, 0x94, 0xc3, 0x7f, 0xa1, 0xa9, 0xf9, 0xbe, 0x83, 0x6a, 0xc2, 0x85, 0x09 };
// unsigned char *msg_array_sha[] = { msg_0_sha, msg_1_sha, msg_2_sha, msg_3_sha, msg_4_sha, msg_5_sha, msg_6_sha, msg_7_sha, msg_8_sha, msg_9_sha, msg_10_sha, msg_11_sha, msg_12_sha, msg_13_sha, msg_14_sha, msg_15_sha, msg_16_sha, msg_17_sha, msg_18_sha, msg_19_sha, msg_20_sha, msg_21_sha, msg_22_sha, msg_23_sha, msg_24_sha, msg_25_sha, msg_26_sha, msg_27_sha, msg_28_sha, msg_29_sha, msg_30_sha, msg_31_sha, msg_32_sha, msg_33_sha, msg_34_sha, msg_35_sha, msg_36_sha, msg_37_sha, msg_38_sha, msg_39_sha, msg_40_sha, msg_41_sha, msg_42_sha, msg_43_sha, msg_44_sha, msg_45_sha, msg_46_sha, msg_47_sha, msg_48_sha, msg_49_sha, msg_50_sha, msg_51_sha, msg_52_sha, msg_53_sha, msg_54_sha, msg_55_sha, msg_56_sha, msg_57_sha, msg_58_sha, msg_59_sha, msg_60_sha, msg_61_sha, msg_62_sha, msg_63_sha, msg_64_sha };
// int msg_len_sha[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64 };
// }

/* read integer value
 * return number of bytes read */
int get_int(char* ptr, unsigned int *i_val){
    /* check for valid ptr */
    if(ptr == NULL){
        printf("get_int: invalid pointer\n");
        return -1;
    }
    /* read 1 byte at a time
     * write to int */
    *i_val = (unsigned char) ptr[3];
    *i_val <<= 8;
    *i_val += (unsigned char) ptr[2];
    *i_val <<= 8;
    *i_val += (unsigned char) ptr[1];
    *i_val <<= 8;
    *i_val += (unsigned char) ptr[0];
    return sizeof(int);
}

/* get pointer to message and increment pointer */
/* get pointer to message
 * return size of message + padding */
int get_msg(char *ptr, uint8_t **msg_ptr, int size){
    /* check for valid ptr */
    if(ptr == NULL){
        printf("get_msg: invalid pointer\n");
        return -1;
    }
    /* update message pointer */
    *msg_ptr = (uint8_t*) ptr;
    /* calculate padding to next multiple of 4 */
    int padding = (4-(size%4))%4;

    return (sizeof(uint8_t)*size) + padding;
}

/* copy memory from pointer to another */
void mem_copy(uint8_t *src_buf, char *dst_buf, int size){
    if(src_buf == NULL || dst_buf == NULL){
        printf("mem_copy: invalid pointer\n");
        return;
    }
    int i = 0;
    while(i<size){
        dst_buf[i] = src_buf[i];
        i++;
    }
    return;
}

/* copy mesage to pointer, update pointer to after message
 * returns number of chars written
 */
int save_msg(char *ptr, uint8_t* msg, int size){
    if(ptr == NULL || msg == NULL || size < 0 ){
        printf("save_msg: invalid inputs\n");
        return -1;
    }

    // copy message to pointer
    mem_copy(msg, ptr, size); 
    return sizeof(uint8_t)*size;
}
void Full_SHA_Test(Versat* versat) {
    printf("Init Full SHA Test\n");
    uint8_t digest[256] = {0};
    unsigned int num_msgs = 0;
    unsigned int msg_len = 0;

// Pointer to DDR_MEM
#ifdef PC
    char ddr_mem[100000] = {0};
#else
#ifndef RUN_EXTMEM
    char *ddr_mem = (char*) (EXTRA_BASE);
#else
    char *ddr_mem = (char*) ((1<<(FIRM_ADDR_W)));
#endif
#endif

    // instantiate Versat
    FUDeclaration* type = GetTypeByName(versat,MakeSizedString("SHA"));
    Accelerator* accel = CreateAccelerator(versat);
    FUInstance* inst = CreateFUInstance(accel,type,MakeSizedString("Test"));
    SetSHAAccelerator(accel,inst);
    InitVersatSHA(versat,true);

    // Receive Input Data
    char input_file_name[] = "soc-in.bin";
    int din_ptr = 0, din_size = 0;
    char *din_fp = (char*) (ddr_mem + VERSAT_SHA_W_PTR_NBYTES);
    int dout_ptr = 0, dout_size = 0;
    char *dout_fp;

    printf("Before receive input file\n");
    din_size = uart_recvfile(input_file_name, din_fp);    
    printf("Received file with %d bytes\n", din_size);

    // while(cache_wtb_empty() == 0){
    //     printf("\t\tcache wtb wait\n");
    // }

    // Calculate output size and allocate output memory
    din_ptr += get_int(din_fp + din_ptr, &num_msgs);
    dout_size = num_msgs*HASH_SIZE;
    // Output file starts after input file
    dout_fp = din_fp + din_size;

    // Message test loop
    int i=0;
    uint8_t *msg = NULL;
    for(i=0; i< (int) num_msgs; i++){
        // Parse messages and length
        din_ptr += get_int(din_fp + din_ptr, &msg_len);
        din_ptr += get_msg(&(din_fp[din_ptr]), &msg, ((msg_len) ? msg_len : 1) );
        printf("\ttest vector #%d/%d | size=%d | ptr=%p, mod(4)=%d...", i+1,num_msgs, msg_len, msg, ((int)msg)%4);
        // printf("\ttest vector #%d/%d | size=%d | ptr=%p, mod(4)=%d...", i+1,num_msgs, msg_len_sha[0], msg_array_sha[0], ((int)msg_array_sha[0])%4);

        VersatSHA(digest, msg, msg_len);
        // VersatSHA(digest, msg_array_sha[0], msg_len_sha[0]);
        printf("done!\n");

        // Save to memory
        dout_ptr += save_msg(&(dout_fp[dout_ptr]), digest, HASH_SIZE);
    }

    // Send message digests via uart
    char output_file_name[] = "soc-out.bin";
    uart_sendfile(output_file_name, dout_size, dout_fp);
    
    // // Debug Send back input file
    // uart_sendfile("soc-in-back.bin", din_size, din_fp);

    return;
}
